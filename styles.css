/*--------------------------------------------- GLOBAL STYLES --------------------------------------------- */

* {
  margin: 0;
  box-sizing: border-box;
  font-family: monospace, sans-serif;
  color: black;

  /* outline: auto;
  outline-color: red; */

  /*--------------------------------------------- HEADER --------------------------------------------- */
}
header {
  padding: 30px;
  background-color: #e87461;
  border-bottom: 1px solid black;
}
header .name {
  font-size: 40px;
  text-decoration: none;
  font-weight: 800;
  padding-bottom: 10px;
}
header .contact {
  display: flex;
  flex-direction: column;
  position: absolute;
  top: 30px;
  right: 10px;
}
header .contact a {
  margin-bottom: 10px;
}
header .contact a:hover {
  color: #0000ff;
}
header nav {
  display: flex;
}
header nav a {
  text-decoration: none;
  padding: 0px 10px;
  /* padding: 0px 10px ---> first value = top/bottom, 2nd value = left/right*/
  background-color: white;
  border-radius: 20px;
  letter-spacing: 1px;
  margin-right: 10px;
}
header nav a:hover {
  background-color: #e87461;
}

/*--------------------------------------------- MAIN CONTENT INDEX --------------------------------------------- */

main .banner {
  background-image: url(images/banner.jpg);
  /*I had to resize the image to 1200W x 700H, which is more appropriate for a background image*/
  background-repeat: no-repeat;
  background-size: cover;
  /* background-size: cover ---> scales the image to the banner area*/
  padding-top: 100px;
  padding-bottom: 100px;
  border-bottom: 1px solid black;
}
main .main-container {
  display: flex;
  justify-content: space-between;
  margin: 40px 100px;
}
main .main-container > * {
  /*  > * is just for selecting all children  */
  padding: 10px;
  margin-bottom: 5%;
  min-width: 0;
  flex-basis: 31%;
}
main .main-container img {
  width: 100%;
  border-radius: 40px;
}
main .main-container :hover {
  background-color: #e87461;
  border-radius: 40px;
}
main .main-container h2 {
  text-align: center;
  padding-bottom: 5px;
  font-weight: 600;
  margin: 10px, 0px;
  font-size: 30px;
}
main .main-container p {
  text-align: center;
  padding-bottom: 5px;
  font-weight: 300;
  line-height: 30px;
  font-size: 20px;
}
main .note {
  color: red;
}

/*--------------------------------------------- MAIN CONTENT ABOUT BANNER --------------------------------------------- */

main .banner {
  margin-bottom: 30px;
}

main .banner h1 {
  text-align: center;
}

main .banner p {
  text-align: center;
}

/*--------------------------------------------- MAIN CONTENT ABOUT  --------------------------------------------- */
/*used this website to help work out below code https://cssgrid-generator.netlify.app */

.about-container {
  margin: 20px;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(3, 1fr);
  grid-column-gap: 20px;
  grid-row-gap: 20px;
}

.about-box {
  background-color: #e87461;
  padding: 20px;
  border-radius: 10px;
}

.about-box h2 {
  text-align: center;
  padding-bottom: 10px;
}

.about-box ul {
  padding-bottom: 10px;
  padding-top: 10px;
}

.about-box p {
  padding-bottom: 0px;
  padding-top: 20px;
}

.item-A {
  grid-area: 1 / 1 / 2 / 3;
}
.item-B {
  grid-area: 2 / 2 / 4 / 3;
}
.item-C {
  grid-area: 2 / 1 / 3 / 2;
}
.item-D {
  grid-area: 3 / 1 / 4 / 2;
}
/*--------------------------------------------- ABOUT-IMAGES --------------------------------------------- */

.image-gallery {
  padding-right: 40px; /*For some reason, despite justify-content center, The container wasnt aligned with the container above. This padding fixed that, although I'm not sure if this is the correct*/
  display: flex;
  flex-wrap: wrap; /*The flex-wrap property ensures that flex items will wrap onto another line*/
  justify-content: center; /*The justify-content property with a value of center will center items on the main axis*/
  gap: 20px; /*The gap property sets a gap between rows and columns (in this case, 10px)*/
}

.image-gallery > li {
  flex-basis: 400px; /*On the flex item, we applied a flex-basis: 350px;. Every flex item can grow or shrink from its natural size. By default, they have the following declarations: flex-grow: 0, flex-shrink: 1, and flex-basis: auto. Meaning, flex items use their natural content size if no size is defined. In our case, we defined a size of 350px. So, individual items take a width value of 350px. With the default grow and shrink value, the items can shrink from their flex-basis to fit the container but not grow from it. The second project below will discuss how to make flex items grow from their initial length.*/
  list-style-type: none;
}

.image {
  object-fit: cover; /*The object-fit: cover; we applied to the image keeps its aspect ratio and ensures it clips to fit.*/
  width: 100%; /*adding max-width: 100%; and height: auto; ensures images are responsive and can scale well. We can also use width: 100%; and height: 100%; instead. In the end, the layout looks like so*/
  height: 400px;
  vertical-align: middle;
  border-radius: 5px;
}

/*--------------------------------------------- MAIN CONTENT TIMELINE --------------------------------------------- */

.timeline-title {
  text-align: center;
  margin-top: 30px;
  border-top: solid 1px black;
  padding-top: 30px;
}
.timeline {
  position: relative;
  max-width: 1200px;
  margin: 50px auto;
}
.timeline-container {
  margin: 10px;
  position: relative;
  width: 50%; /*sets this container to be x% of .timeline div*/
  background-color: #e87461;
  /* border-radius: 10px; */
}
.timeline-content {
  padding: 20px;
  position: relative;
}
.left {
  left: 0;
}
.right {
  left: 50%;
}
.timeline::after {
  content: "";
  position: absolute;
  width: 6px;
  height: 100%;
  background: black;
  top: 0;
  left: 50%;
  margin-left: 5px;
  /* z-index: -1; */
}

.timeline-content h2 {
  font-weight: 600;
}
.timeline-content small {
  display: inline-block;
  margin-bottom: 15px;
}
.timeline-content li {
  margin: 15px;
}

/*--------------------------------------------- MEDIA QUERIES --------------------------------------------- */

@media (max-width: 1200px) {
  header .contact {
    position: static;
  }
}

@media (max-width: 1200px) {
  main .main-container {
    flex-direction: column;
    margin: 50px;
  }
}

@media (max-width: 1200px) {
  .image-subcontainer {
    grid-row: span 1;
  }
}

/*--------------------------------------------- COMMENTS --------------------------------------------- */

/* 
Below are comments/useful links to features used in the above CSS code.

Outline can be useful for identifying sections of the site & their containers. Comment out when not in use.

The best way to solve the problem of an inconsistent box model is to set all the margins 
and padding values of HTML elements to zero. 
https://www.thoughtco.com/css-zero-out-margins-3464247 

The box-sizing property allows us to include the padding and border in an element's total width and height.
https://www.w3schools.com/css/css3_box-sizing.asp

An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).
However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.
https://www.w3schools.com/css/css_positioning.asp

media queries are basically conditional statements.
*/
